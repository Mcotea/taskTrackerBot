import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons, editButtons } from './app.buttons';
import { AppService } from './app.service';
import { showList } from './app.utils';
import { Context } from './context.interface';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}
  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç!üê∏');
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å c–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('‚ûï–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
  async createTask(ctx: Context) {
    ctx.session.type = 'create';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ');
  }
  @Hears('üìã–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async tasksList(ctx: Context) {
    const todos = await this.appService.getAll(ctx.chat.id);
    const botMessage = ctx.message.message_id - 1;
    const userMessage = ctx.message.message_id;
    await ctx.deleteMessages([botMessage, userMessage]);
    if (await this.appService.isEmpty(ctx.chat.id)) {
      await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
    } else {
      await ctx.reply(showList(todos), actionButtons());
    }
  }

  @Hears('‚úÖ–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É')
  async doneTask(ctx: Context) {
    ctx.session.type = 'done';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ');
  }

  @Hears('‚úèÔ∏è–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É')
  async editTask(ctx: Context) {
    ctx.session.type = 'edit';
    await ctx.deleteMessage();
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å c–¥–µ–ª–∞—Ç—å?', editButtons());
  }

  @Hears('üìñ–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
  async editTaskName(ctx: Context) {
    ctx.session.type = 'edit name';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: \n\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>ID. –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
      actionButtons(),
    );
  }

  @Hears('#Ô∏è‚É£–ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
  async editTaskTag(ctx: Context) {
    ctx.session.type = 'edit tag';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \n\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>ID. –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>',
      actionButtons(),
    );
  }

  @Hears('‚è≥–ü–æ–º–µ–Ω—è—Ç—å –¥–µ–¥–ª–∞–π–Ω')
  async editTaskDeadline(ctx: Context) {
    ctx.session.type = 'edit deadline';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: \n\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>ID. –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω</b>',
      actionButtons(),
    );
  }

  @Hears('üîô–ù–∞–∑–∞–¥')
  async goToMainMenu(ctx: Context) {
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å c–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('üóë–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
  async removeTask(ctx: Context) {
    ctx.session.type = 'remove';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ');
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return;

    if (ctx.session.type === 'done') {
      const todos = await this.appService.doneTask(
        Number(message),
        ctx.chat.id,
      );

      if (!todos) {
        await ctx.deleteMessage(ctx.message.message_id - 1);
        await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...ü§®', actionButtons());
        return;
      }

      if (await this.appService.isEmpty(ctx.chat.id)) {
        await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
      } else {
        await ctx.reply(showList(todos), actionButtons());
      }
    }

    if (ctx.session.type === 'create') {
      const todos = await this.appService.createTask(message, ctx.chat.id);
      if (await this.appService.isEmpty(ctx.chat.id)) {
        await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
      } else {
        await ctx.reply(showList(todos), actionButtons());
      }
    }

    if (ctx.session.type === 'edit name') {
      const isValidFormat = /^\d+\..+/.test(message);
      const [taskId, taskName] = message.split('. ');
      if (isValidFormat && taskName) {
        const todos = await this.appService.editTaskName(
          Number(taskId),
          taskName,
          ctx.chat.id,
        );

        if (!todos) {
          await ctx.deleteMessage(ctx.message.message_id - 1);
          await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...ü§®', editButtons());
          return;
        }

        if (await this.appService.isEmpty(ctx.chat.id)) {
          await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
        } else {
          await ctx.reply(showList(todos), actionButtons());
        }
      } else {
        await ctx.replyWithHTML(
          '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: \n\n' +
            '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>ID. –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
          editButtons(),
        );
        return;
      }
    }

    if (ctx.session.type === 'edit tag') {
      const isValidFormat = /^\d+\..+/.test(message);
      const [taskId, taskTag] = message.split('. ');
      if (isValidFormat && taskTag) {
        const todos = await this.appService.editTaskTag(
          Number(taskId),
          taskTag,
          ctx.chat.id,
        );

        if (!todos) {
          await ctx.deleteMessage(ctx.message.message_id - 1);
          await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...ü§®', editButtons());
          return;
        }

        if (await this.appService.isEmpty(ctx.chat.id)) {
          await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
        } else {
          await ctx.reply(showList(todos), actionButtons());
        }
      } else {
        await ctx.replyWithHTML(
          '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \n\n' +
            '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>ID. –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>',
          editButtons(),
        );
        return;
      }
    }

    if (ctx.session.type === 'edit deadline') {
      const isValidFormat = /^\d+\..+/.test(message);
      const [taskId, taskDeadline] = message.split('. ');
      if (isValidFormat && taskDeadline) {
        const todos = await this.appService.editTaskDeadline(
          Number(taskId),
          taskDeadline,
          ctx.chat.id,
        );

        if (!todos) {
          await ctx.deleteMessage(ctx.message.message_id - 1);
          await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...ü§®', editButtons());
          return;
        }

        if (await this.appService.isEmpty(ctx.chat.id)) {
          await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
        } else {
          await ctx.reply(showList(todos), actionButtons());
        }
      } else {
        await ctx.replyWithHTML(
          '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: \n\n' +
            '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>ID. –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω</b>',
          editButtons(),
        );
        return;
      }
    }

    if (ctx.session.type === 'remove') {
      const todos = await this.appService.deleteTask(
        Number(message),
        ctx.chat.id,
      );

      if (!todos) {
        await ctx.deleteMessage(ctx.message.message_id - 1);
        await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...ü§®', actionButtons());
        return;
      }

      if (await this.appService.isEmpty(ctx.chat.id)) {
        await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!', actionButtons());
      } else {
        await ctx.reply(showList(todos), actionButtons());
      }
    }
  }

  getHello() {
    return undefined;
  }
}
